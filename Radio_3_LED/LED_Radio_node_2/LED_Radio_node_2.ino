#include <SPI.h>                            // Подключаем библиотеку для работы с шиной SPI.
#include <nRF24L01.h>                       // Подключаем файл настроек из библиотеки RF24
#include <RF24.h>                           // библиотека для работы с nRF24L01+ https://yadi.sk/d/nX_akvzEusyGz
RF24 radio(9, 10);                          // Создаём объект radio для работы с библиотекой RF24, указывая номера выводов nRF24L01+ (CE, CSN).
int TEST = 123;                             // Создаём переменную для передачи данных
void setup() {
  pinMode(14, OUTPUT);                      // LED. процесс приёма / передачи, подтверждаем миганием светодиода
  radio.begin();                            // Инициируем работу nRF24L01+.
  radio.setChannel(5);                      // Указываем канал передачи данных (от 0 до 127), 5 - значит передача данных осуществляется на частоте 2,405 ГГц.(на одном канале можно, одновременно иметь "1 передатчик-рот-труба" или "6 приёмников-ушей-трубы"
  radio.setDataRate     (RF24_250KBPS);     // Указываем скорость передачи данных (RF24_250KBPS, RF24_1MBPS, RF24_2MBPS). При скорости 2 Мб/с, задействуются сразу два канала (выбранный и следующий за ним). (самая дальнобойная 250KBPS, но скорость меньше)
  radio.setPALevel      (RF24_PA_HIGH);     // Указываем мощность передатчика (RF24_PA_MIN=-18dBm, RF24_PA_LOW=-12dBm, RF24_PA_HIGH=-6dBm, RF24_PA_MAX=0dBm).
  radio.openWritingPipe (0xAABBCCDD11LL);   // Открываем трубу с идентификатором 0xAABBCCDD11 (для передачи данных). на одном канале может быть только 1 труба, для передачи). (последний байт "идентификатора-передатчика (11)" нужен для распознавания трубами приёмника, которых может быть до 6-на одном канале).
}
void loop () {
  if (millis() / 50 % 2) {                 // "delay" устанавливаем задержку на 50 мс, за это время приемник успеет принять и обработать данные этого и другого передатчика.
    if (radio.write(&TEST, sizeof(TEST)))  // отправляем данные на другую Arduino. sizeof(TEST)))-указываем, сколько байт мы хотим отправить)(Приемник отправляет передатчику сигнал подтверждения приёма данных (без смены режима работы).
      digitalWrite(14, HIGH);              // если узнаём от принимающей стороны, что Пакет был успешно отправлен!, включаем LED.
    else digitalWrite(14, LOW);            // если пакет не доставлен!, выключаем LED.
  }
}
